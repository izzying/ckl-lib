package de.ckl.testing.domain;

import java.lang.reflect.Field;
import java.util.HashMap;

import org.apache.log4j.Logger;

import de.ckl.testing.domain.generator.interfaces.ValueGenerator;
import de.ckl.testing.domain.generator.strategy.ValueCreationDelegator;
import de.ckl.testing.domain.generator.strategy.ValueCreationStrategy;
import de.ckl.testing.domain.handlers.IRangeDeterminator;
import de.ckl.testing.domain.handlers.RangeDeterminator;

/**
 * Inspects a field of an object and delegates to {@link ValueCreationDelegator}
 * 
 * @author ckl
 * 
 * @param <E>
 */
public class DataGenerationDelegator<E> implements ValueCreationStrategy
{
	Logger log = Logger.getLogger(DataGenerationDelegator.class);

	private static HashMap<Class<?>, ValueGenerator> mapGlobalGeneratorClasses = new HashMap<Class<?>, ValueGenerator>();

	private HashMap<Class<?>, ValueGenerator> mapGeneratorClasses = new HashMap<Class<?>, ValueGenerator>();

	private IRangeDeterminator rangeDeterminator = new RangeDeterminator();

	private ValueCreationStrategy valueCreationStrategy = new ValueCreationDelegator();

	public void setMapGeneratorClasses(
			HashMap<Class<?>, ValueGenerator> mapGeneratorClasses)
	{
		this.mapGeneratorClasses = mapGeneratorClasses;
	}

	public HashMap<Class<?>, ValueGenerator> getMapGeneratorClasses()
	{
		return mapGeneratorClasses;
	}

	public void setRangeDeterminator(IRangeDeterminator rangeDeterminator)
	{
		this.rangeDeterminator = rangeDeterminator;
	}

	public IRangeDeterminator getRangeDeterminator()
	{
		return rangeDeterminator;
	}

	/**
	 * Returns the best validator for given class. First lookup is in
	 * {@link #getMapGeneratorClasses()}, then
	 * {@link #getMapGlobalGeneratorClasses()}
	 * 
	 * @param clazz
	 * @return
	 */
	public ValueGenerator findBestValueGenerator(Class<?> clazz)
	{
		if (getMapGeneratorClasses().containsKey(clazz))
		{
			return getMapGeneratorClasses().get(clazz);
		}

		return getMapGlobalGeneratorClasses().get(clazz);
	}

	public Object generate(FieldCreationEnvironment _fieldCreationEnvironment)
	{
		Object r = null;

		_fieldCreationEnvironment.setMinLength(getRangeDeterminator()
				.getMinLength(_fieldCreationEnvironment.getField()));
		_fieldCreationEnvironment.setMaxLength(getRangeDeterminator()
				.getMaxLength(_fieldCreationEnvironment.getField()));
		Class<?> clazz = _fieldCreationEnvironment.getField().getType();

		ValueGenerator generator = findBestValueGenerator(clazz);

		Field field = _fieldCreationEnvironment.getField();

		if (generator != null)
		{
			log.info("Field [" + field.getName() + "] of type ["
					+ field.getType().getName() + "] is generated by class ["
					+ generator.getClass().getName() + "]");

			_fieldCreationEnvironment.setGenerator(generator);
			r = getValueCreationStrategy().generate(_fieldCreationEnvironment);
		}
		else
		{
			log.error("Could not locate generator for field type ["
					+ clazz.getName() + "]");
		}

		return r;
	}

	public void setValueCreationStrategy(
			ValueCreationStrategy valueCreationStrategy)
	{
		this.valueCreationStrategy = valueCreationStrategy;
	}

	public ValueCreationStrategy getValueCreationStrategy()
	{
		return valueCreationStrategy;
	}

	public static void setMapGlobalGeneratorClasses(
			HashMap<Class<?>, ValueGenerator> mapGlobalGeneratorClasses)
	{
		DataGenerationDelegator.mapGlobalGeneratorClasses = mapGlobalGeneratorClasses;
	}

	public static HashMap<Class<?>, ValueGenerator> getMapGlobalGeneratorClasses()
	{
		return mapGlobalGeneratorClasses;
	}
}